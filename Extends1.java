
// p 继承和多态 
// 继承是指一个类可以继承另一个类的属性和方法。被继承的类称为父类或基类，继承的类称为子类或派生类。
// 子类可以继承父类的属性和方法，也可以通过重写（覆盖）父类的方法来实现自己的功能。
// 多态是面向对象编程中的一个重要概念，它允许不同的对象对同一个消息作出不同的响应。
// 多态的实现需要满足两个条件：继承和方法重写。
// p --------------------------------------子类
/**
 * b "is
 * a"关系是面向对象编程中的一个基本概念，用于描述一个类与另一个类之间的继承关系。如果类A继承自类B，我们就可以说"A是B"，也就是说A具有B的所有属性和方法，同时还可以添加自己的属性和方法。
 * "is a"关系是一种非常基础的关系，它是面向对象编程中实现多态性的基础。通过使用"is
 * a"关系，我们可以将对象看作是它们所属的类的实例，也可以将它们看作是它们的超类的实例。
 */
// b -----------------extends 用于实现继承关系的关键字，它可以用来创建一个类的子类，让子类继承父类的属性和方法。
// w 修饰符 class SubClass(子) extends SuperClass(父) {}
// SubClass表示子类，SuperClass表示父类。通过extends关键字，SubClass可以继承SuperClass中的所有非私有属性和方法，包括public、protected和默认访问权限的成员。子类可以根据需要重写父类中的方法，并且还可以添加自己的属性和方法。前提是这些属性和方法的访问权限是public或protected。
// Java中只支持单继承，也就是说一个类只能有一个直接父类。但是，一个类可以实现多个接口，从而达到类似多继承的效果。
// b ----------------在Java中，Object类 是所有类的根类，所有的类都直接或间接继承自Object类。
// Object类中定义了许多Java中常用的方法，这些方法可以被所有的子类继承和使用
// 常用的Object类方法：
// o equals(obj)方法：比较两个对象是否相等。比较的是对象的引用地址，返回一个布尔 如果需要比较对象的属性值，就需要重写equals()方法。
// no hashCode()方法：返回对象的哈希码值。哈希码值可以用于将对象存储在哈希表中。
// o toString()方法：返回对象的字符串表示形式
// 是本身的有关信息。返回的是对象的类名和哈希码值，如果需要返回对象的属性值，就需要重写toString()方法。
// o getClass()方法：返回对象的类对象 即所属类信息。
// wait()、notify()和notifyAll()方法：这些方法用于控制线程的同步和通信，需要在多线程环境下使用。
// no clone()方法：返回对象的副本，可以用于实现对象的复制。
// finalize()方法：在对象被垃圾回收之前调用，可以用于执行一些清理操作。

// b ---------------------------- 单重继承
// o 单重继承指的是一个子类只能继承一个父类的特性。也就是说，在一个类中，只能使用一个extends关键字来继承一个父类，而不能同时继承多个类。
// 这与多重继承不同，多重继承允许一个子类同时继承多个父类的特性。

// 单重继承是Java面向对象编程中的一个基本特性，它可以避免由多重继承带来的复杂性和歧义性，使得代码更加简单和易于维护。在Java中，可以通过接口(interface)来实现类似多重继承的功能，接口允许一个类实现多个接口的特性。这种方式比多重继承更加灵活和安全，可以有效地避免多重继承带来的问题。
// r 子类并不会直接继承父类的构造方法代码，而是通过调用父类的构造方法来完成父类的初始化操作。使用super关键字来调用父类的构造方法，

// p 方法覆盖与多态
// 方法覆盖是指在子类中定义一个与父类中具有相同名称和参数列表的方法，从而覆盖父类中的方法实现。当子类对象调用该方法时，会优先调用子类中的方法，而不是父类中的方法。
// 多态是指同一种类型的对象，在不同的情况下会表现出不同的行为。在Java中，多态的实现通常是通过方法覆盖和向上转型来实现的。


public class Extends1 {
    public static void main(String[] args) {

    }

}
